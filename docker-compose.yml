services: 
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auction_db
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - app-net


  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongopw
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    healthcheck:
      test:
        [
          "CMD",
          "mongo",
          "--quiet",
          "127.0.0.1/test",
          "--eval",
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-net

  rabbitmq:
    image: rabbitmq:4-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  auction-svc:
    image: efaby10/auction-svc:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./src/AuctionService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_URLS=http://+:7777
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__DefaultConnection=Server=postgres:5432;User Id=postgres;Password=postgres;Database=auction_db 
      - IdentityServiceUrl=http://identity-svc
      - Kestrel__Endpoints__Grpc__Protocols=Http2
      - Kestrel__Endpoints__Grpc__Url=http://+:7777
      - Kestrel__Endpoints__WebApi__Protocols=Http1
      - Kestrel__Endpoints__WebApi__Url=http://+:80

    ports:
      - "7001:80"
      - "7777:7777"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-net

  search-svc:
    image: efaby10/search-svc:latest
    build:
      context: .
      dockerfile: ./src/SearchService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__MongoDb=mongodb://root:mongopw@mongodb:27017
      - AuctionServiceUrl=http://auction-svc
    ports:
      - "7002:80"
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - app-net

  identity-svc:
    image: efaby10/identity-svc:latest
    build:
      context: .
      dockerfile: ./src/IdentityService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=postgres:5432;User Id=postgres;Password=postgres;Database=identity_db 
      - IssuerUri=https://id.carsties.local:5001
      - ClientApp=https://app.carsties.local:3000
    volumes:
      - dataprotection-keys:/root/.aspnet/DataProtection-Keys
    ports:
      - "5001:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-net

  gateway-svc:
    image: efaby10/gateway-svc:latest
    build:
      context: .
      dockerfile: ./src/GatewayService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ClientApp=https://app.carsties.local:3000
      - VIRTUAL_HOST=api.carsties.local
    networks:
      - app-net

  bid-svc:
    image: efaby10/bid-svc:latest
    platform: linux/amd64 
    build:
      context: .
      dockerfile: ./src/BiddingService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__BidDbConnection=mongodb://root:mongopw@mongodb:27017
      - IdentityServiceUrl=http://identity-svc
      - GrpcAuction=http://auction-svc:7777
    ports:
      - "7003:80"
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - app-net

  notify-svc:
    image: efaby10/notify-svc:latest
    platform: linux/amd64 
    build:
      context: .
      dockerfile: ./src/NotificationService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
    ports:
      - "7004:80"
    networks:
      - app-net

  web-app:
    image: efaby10/web-app:latest
    build:
      context: .
      dockerfile: ./frontend/web-app/Dockerfile
    volumes:
      - /var/lib/web/data
    environment:
      - NEXTAUTH_SECRET="F4mi1XMm2pPdGPV5q/U48OKtai/N2Zi/BjY4aW4uq3w="
      - NEXTAUTH_URL=https://app.carsties.local:3000
      - NEXTAUTH_URL_INTERNAL=http://web-app:3000
      - API_URL=http://gateway-svc/
      - ID_URL=https://id.carsties.local:5001
      - ID_URL_INTERNAL=http://identity-svc   
      - HOSTNAME=0.0.0.0
      - VIRTUAL_HOST=app.carsties.local
      - VIRTUAL_PORT=3000
    networks:
      - app-net

  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./devcerts:/etc/nginx/certs 
    networks:
      - app-net  

    
volumes:
  mongodata:
  dataprotection-keys:
networks:
  app-net:
    driver: bridge